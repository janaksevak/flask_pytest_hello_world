version: 2.1

orbs:
  browser-tools: circleci/browser-tools@1.5.3

executors:
  python-executor:
    docker:
      # Standard Cimg Python image with browsers
      - image: cimg/python:3.10-browsers

jobs:
  # Build Job
  build:
    executor: python-executor

    steps:
      - checkout
      
      # Create Environment
      - run:
          name: Create Environment
          command: |
            python -m venv venv
            mkdir test_results


      # Install Python dependencies
      - run:
          name: Install Python dependencies
          command: |
            # pip3 install -r requirements.txt
            ls -altr
            source venv/bin/activate
            pip install -r requirements.txt

      # Persist the workspace for later jobs
      - persist_to_workspace:
          root: .  # Root directory of the workspace to persist
          paths:    # Paths relative to root that will be persisted
            - venv
            - test_results


  # Test Job
  test:
    executor: python-executor

    steps:
      - checkout
      - browser-tools/install-chrome
      - browser-tools/install-chromedriver

      # Attach the workspace from the build job
      - attach_workspace:
          at: .  # Directory to attach the workspace to

      # Verify browser versions for debugging
      - run:
          name: Check versions
          command: |
            google-chrome --version
            chromedriver --version

      # Verify local enviroment
      - run:
          name: Verify Environment
          command: |
            ls -altr
            env

      # Run pytest and capture logs
      - run:
          name: Run Test and Capture Logs
          command: |          
            source venv/bin/activate
            # python hello_world.py
            export FLASK_APP=hello_world.py
            flask run --host=0.0.0.0 --port=5000 &
            sleep 3
            pytest test_hello_world.py > test_results/test_output.log 2>&1

      # Store test results and artifacts
      - store_test_results:
          path: test_results
      - store_artifacts:
          path: test_results

  # Mock Deploy Staging
  deploy-staging:
    executor: python-executor
    steps:
      - run:
          name: Deploy Cluster 1
          command: echo "Successfully Deployed to Staging Cluster 1"
      - run:
          name: Deploy Deploy 2
          command: echo "Successfully Deployed to Staging Cluster 2"

  # Mock Deploy Prod
  deploy-prod:
    executor: python-executor
    steps:
      - run:
          name: Deploy Prod 1
          command: echo "Successfully Deployed to Prod Cluster 1"
      - run:
          name: Deploy Prod 2
          command: echo "Successfully Deployed to Prod Cluster 2"

# Setting up the workflow
workflows:
  prod_run:
    jobs:
      - build
      - test:
          requires:
            - build      
      - deploy-staging:
          requires:
            - test
      - deploy-prod:
          requires:
            - deploy-staging